<?xml version="1.0"?>
<doc>
    <assembly>
        "Lumia.Sense.Testing"
    </assembly>
    <members>
        <member name="M:GetTimestamp">
            <summary>
Returns current timestamp
</summary>
            <returns>current timestamp</returns>
        </member>
        <member name="M:MapFromActivityClassToActivity(System.UInt64)">
            <summary>
Maps native activity class to managed activity
</summary>
            <param name="activityClass">native activity class</param>
            <returns>managed activity</returns>
        </member>
        <member name="M:MapFromActivityClassToActivity(System.UInt64,Lumia.Sense.Activity*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
Maps native activity class to managed activity
</summary>
            <param name="activityClass">native activity class</param>
            <param name="activity">upon success the mapped activity</param>
        </member>
        <member name="D:ACTIVITY_CLASS">
@Copyright  Copyright (c) 2012-2013 Nokia Corporation and/or its subsidiary(-ies).
            All Rights reserved.
            This software, including documentation, is protected by copyright
            controlled by Nokia Corporation. All rights are reserved. Copying,
            including reproducing, storing, adapting or translating, any or all
            of this material requires the prior written consent of Nokia Corporation.
            This material also contains confidential information which may not be
            disclosed to others * without the prior written consent of Nokia.

@CONTACT    toni.kettula@nokia.com, juha.rakkola@nokia.com

@MODULENAME Module Name: NokiaActivityDetectionApiV2.h

@ABSTRACT   Abstract:
            API header for activity detection service. The API allows clients to
            subscribe to notifications about activity state changes.

@CLASS      File Class:
            sensitive

</member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorSimulator.removedPlacesMap">
            <summary> Removed places mapped places based on Time</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorSimulator.newPlacesMap">
            <summary> New places mapped places based on Time</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorSimulator.m_csSimulator">
            <summary>Synchronization object</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorSimulator.m_recordingDuration">
            <summary> Recording duration </summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorSimulator.m_recordingStart">
            <summary> Recording start timestamp </summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorSimulator.m_simulationStart">
            <summary> Simulation start timestamp </summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorSimulator.m_initialKnownPlaces">
            <summary> Initial known places saved for resetting between loops </summary>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.UpdatePlaces(System.Int64,Windows.Foundation.Collections.IVector`1{Lumia.Sense.Place^})">
            <summary>
Update places
</summary>
            <param name="delta">delta from the start time</param>
            <param name="iCurrentPlaces">Updates the current places with new and removed entries</param>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetPlace(Lumia.Sense.PlaceKind)">
            <summary>
GetPlace
</summary>
            <param name="Place Kind">Place Kind</param>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.Initialize(Lumia.Sense.Testing.SenseRecording,System.UInt64)">
            <summary>
Initialize simulator
</summary>
            <param name="recording">Sensor recording</param>
            <param name="startTime">Start time for simulation.</param>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.DeactivateAsync">
            <summary>
Closes the connection to sensor
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.ActivateAsync">
            <summary>
Re-establishes connection to sensor, if not already available
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
        </member>
        <member name="P:Lumia.Sense.Testing.PlaceMonitorSimulator.Type">
            <summary>
The sensor type.
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetKnownPlaceAsync(System.UInt32)">
            <summary>
Gets place by place id.
</summary>
            <param name="id">Place id</param>
            <returns>
Queried Place.
</returns>
            <remarks>
The return value is <c>null</c> in case place is not available.
</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and query 
for place with id 12345.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
Place place = await placeMonitor.GetKnownPlaceAsync(12345);
</code></example>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetWorkAsync">
            <summary>
Gets the work location.
</summary>
            <returns>
The work place.
</returns>
            <remarks>
The return value is <c>null</c> in case work is not deduced on the device.
</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and query 
for work.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
Place work = await placeMonitor.GetWorkAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetHomeAsync">
            <summary>
Gets the home location.
</summary>
            <returns>
The home place.
</returns>
            <remarks>
The return value is <c>null</c> in case home is not deduced on the device.
</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.SensorDeactivated" />, <see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, 
<see cref="F:Lumia.Sense.SenseError.SenseDisabled" />, <see cref="F:Lumia.Sense.SenseError.LocationDisabled" /></exception>
            <example>
The following example shows how to get the <c>PlaceMonitor</c> and query 
for home.
<code lang="C#">
PlaceMonitor placeMonitor = await PlaceMonitor.GetDefaultAsync();
Place home = await placeMonitor.GetHomeAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetKnownPlacesAsync">
            <summary>
Gets the set of currently known places.
</summary>
            <returns>
                <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
The current list of known places.
</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording,Windows.Foundation.DateTime)">
            <summary>
Gets the default implementation.
</summary>
            <param name="recording">Sensor recording</param>
            <param name="startTime">Starting time for recording.</param>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording)">
            <summary>
Gets the default implementation.
</summary>
            <param name="recording">Sensor recording</param>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorSimulator.GetDefaultAsync">
            <summary>
Gets the default implementation.
</summary>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="T:Lumia.Sense.Testing.PlaceMonitorSimulator">
            <summary>
Represents a monitor that identifies and maintains a list of geographic places
visited by the device.
</summary>
            <remarks>
This entity monitors several primitive sensor values, such as the device's geographic 
location, to identify a geographic location visited frequently. The most frequented
places are then classified using various heuristics into a kind of a place. The 
classification is best effort and should not be expected to yield full accuracy
in all styles of device usage. An application can and should implement a mapping
from this pre-defined classification of places into concepts and visuals releavant
in the application context.
</remarks>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterSimulator.m_fLoop">
            <summary> Should simulator loop events </summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterSimulator.m_recordDuration">
            <summary> Recording unaltered duration </summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterSimulator.m_recordingDuration">
            <summary> Recording duration </summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterSimulator.m_recordingStart">
            <summary> Recording start timestamp </summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterSimulator.m_simulationStart">
            <summary> Simulation start timestamp </summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterSimulator.m_currentSteps">
            <summary> Simulated current steps </summary>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetStepCountAt(System.Int64)">
            <summary>
Gets the step count at given time.
</summary>
            <remarks>
The available data extends only up to the last 10 days.
</remarks>
            <param name="atStamp">time to get the step count for</param>
            <returns>Step count at the given time</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.Initialize(Lumia.Sense.Testing.SenseRecording,System.UInt64)">
            <summary>
Initialize simulator
</summary>
            <param name="recording">Sensor recording</param>
            <param name="startTime">Start time for simulation.</param>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.DeactivateAsync">
            <summary>
Closes the connection to sensor
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.ActivateAsync">
            <summary>
Re-establishes connection to sensor, if not already available
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
        </member>
        <member name="P:Lumia.Sense.Testing.StepCounterSimulator.Type">
            <summary>
The sensor type.
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetStepCountAtAsync(Windows.Foundation.DateTime)">
            <summary>
Gets the step count at given time.
</summary>
            <remarks>
The available data extends only up to the last 10 days. When current time is used as timestamp reading from <see cref="M:Lumia.Sense.Testing.StepCounterSimulator.GetCurrentReadingAsync" />
is returned.
</remarks>
            <param name="timestamp">time to get the step count for</param>
            <returns>Step count at the given time</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetStepCountHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns time ordered list of step counts during given time period.
</summary>
            <param name="startTime">start time</param>
            <param name="span">time span</param>
            <returns>Step count history</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <remarks>
The available data extends only up to the last 10 days. If you need to get the current reading, use <see cref="M:Lumia.Sense.Testing.StepCounterSimulator.GetCurrentReadingAsync" />.
<paragraph>If direct match is not available the result list begins with the last entry before the beginning of the given period. 
This enables an application to determine the step count at the start of the period before the first actual event within that period.</paragraph></remarks>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetStepCountForRangeAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Gets the step count for given time range.
</summary>
            <remarks>
The available data extends only up to the last 10 days. When requested range ends to current timestamp current reading is used to count the steps.
</remarks>
            <param name="startTime">start time</param>
            <param name="span">time span</param>
            <returns>Step count for the given range</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: 
<see cref="F:Lumia.Sense.SenseError.InvalidParameter" />, 
<see cref="F:Lumia.Sense.SenseError.GeneralFailure" />, <see cref="F:Lumia.Sense.SenseError.NotFound" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetCurrentReadingAsync">
            <summary>
Gets the current reading.
</summary>
            <returns>
The current reading of the sensor.
</returns>
            <remarks>
The return value may be <c>null</c> in case reading cannot be obtained currently.
</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording,Windows.Foundation.DateTime)">
            <summary>
Gets the default implementation.
</summary>
            <param name="recording">Sensor recording</param>
            <param name="startTime">Start time for simulation.</param>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording)">
            <summary>
Gets the default implementation.
</summary>
            <param name="recording">Sensor recording</param>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterSimulator.GetDefaultAsync">
            <summary>
Gets the default implementation.
</summary>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="T:Lumia.Sense.Testing.StepCounterSimulator">
            <summary>
Represents a step counter sensor.
</summary>
            <remarks>
This sensor returns the user's step count information.
</remarks>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorRecorder.m_recordingEnd">
            <summary>Recording end timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorRecorder.m_recordingStart">
            <summary>Recording start timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorRecorder.m_fRecording">
            <summary>Are we currently recording?</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorRecorder.m_previousTimestamp">
            <summary>Previous data poll timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorRecorder.m_dataPollTimer">
            <summary>Data poll timer</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorRecorder.m_trackPointMonitor">
            <summary>Track point monitor sensor</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorRecorder.m_csRecorder">
            <summary>Synchronization object</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorRecorder.m_readingHistory">
            <summary>Container for track points</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorRecorder.FetchHistoryAsync">
            <summary>
Fetches history readings and adds them to memory store
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorRecorder.IsRecording">
            <summary>
Returns whether the recorder is currently recording or not.
</summary>
            <returns>
                <c>true</c> if the recorder is currently recording, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorRecorder.GetRecording">
            <summary>
Returns the recording
</summary>
            <returns>
Sensor recording
</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorRecorder.StopAsync">
            <summary>
Stops the recording
</summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorRecorder.StartAsync">
            <summary>
Starts the recording
</summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorRecorder.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorRecorder.#ctor(Lumia.Sense.ITrackPointMonitor)">
            <summary>
Constructor
</summary>
            <param name="trackPointMonitor">track point monitor sensor</param>
        </member>
        <member name="T:Lumia.Sense.Testing.TrackPointMonitorRecorder">
            <summary>
Track point monitor recorder
</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorSimulator.m_fLoop">
            <summary>Should simulator loop events</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorSimulator.m_recordingDuration">
            <summary> Recording duration </summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorSimulator.m_recordingStart">
            <summary> Recording start timestamp </summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorSimulator.m_simulationStart">
            <summary>Simulation start timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.TrackPointMonitorSimulator.m_trackPoints">
            <summary> simulated track points </summary>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.Initialize(Lumia.Sense.Testing.SenseRecording,System.UInt64)">
            <summary>
Initialize simulator
</summary>
            <param name="recording">Sensor recording</param>
            <param name="startTime">Start time for simulation.</param>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.DeactivateAsync">
            <summary>
Closes the connection to sensor
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.ActivateAsync">
            <summary>
Re-establishes connection to sensor, if not already available
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
        </member>
        <member name="P:Lumia.Sense.Testing.TrackPointMonitorSimulator.Type">
            <summary>
The sensor type.
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.GetPointAtAsync(Windows.Foundation.DateTime)">
            <summary>
Returns a collected track point from the given time.
</summary>
            <param name="timestamp">Time stamp</param>
            <returns>Track point at the given time</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <remarks>
The available data extends only up to last 10 days.
</remarks>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.GetTrackPointsAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns collected track points for the given time period.
</summary>
            <param name="periodFrom">Start time</param>
            <param name="span">Time span</param>
            <returns>Track points for the given time period</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording,Windows.Foundation.DateTime)">
            <summary>
Gets the default implementation.
</summary>
            <param name="recording">Sensor recording</param>
            <param name="startTime">Start time for simulation.</param>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording)">
            <summary>
Gets the default implementation.
</summary>
            <param name="recording">Sensor recording</param>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.TrackPointMonitorSimulator.GetDefaultAsync">
            <summary>
Gets the default implementation.
</summary>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="T:Lumia.Sense.Testing.TrackPointMonitorSimulator">
            <summary>
Represents a monitor that identifies and maintains a list of geographic places
visited by the device.
</summary>
            <remarks>
Track points are collected passively, i.e. it won't actively track user's location with GPS,
accuracy of track points reflects the used positioning technology.
</remarks>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorRecorder.m_recordingEnd">
            <summary>Recording end timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorRecorder.m_recordingStart">
            <summary>Recording start timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorRecorder.m_fRecording">
            <summary>Are we currently recording?</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorRecorder.m_previousTimestamp">
            <summary>Previous data poll timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorRecorder.m_dataPollTimer">
            <summary>Data poll timer</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorRecorder.m_placeMonitor">
            <summary>Place monitor sensor</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorRecorder.m_csRecorder">
            <summary>Synchronization object</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorRecorder.m_removedSeedDataPoll">
            <summary> Removed place from seed poll data</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorRecorder.m_recordedData">
            <summary> Recorded map</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorRecorder.m_updatedCurrentDataPoll">
            <summary> Initial seed poll data</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.PlaceMonitorRecorder.m_initialData">
            <summary> Initial seed poll data</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorRecorder.AppendData">
            <summary>
Append to the list. Note! Not thread safe!
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorRecorder.InitializeDataPollTimer">
            <summary>
Initializes data poll timer, aligning the timer interval with system clock. Will stop and deallocate 
any previous instance. Note! Not thread safe!
</summary>
            <remarks>In order for the timer interval to be aligned with the system clock, you'll
need to start the timer immediately.</remarks>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorRecorder.FetchDataPollReading">
            <summary>
Fetch polling data reading and adds/remove it to memory store. Note! Not thread safe!
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorRecorder.IsRecording">
            <summary>
Returns whether the recorder is currently recording or not.
</summary>
            <returns>
                <c>true</c> if the recorder is currently recording, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorRecorder.GetRecording">
            <summary>
Returns the recording
</summary>
            <returns>
Sensor recording
</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorRecorder.StopAsync">
            <summary>
Stops the recording
</summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorRecorder.StartAsync">
            <summary>
Starts the recording
</summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorRecorder.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.PlaceMonitorRecorder.#ctor(Lumia.Sense.IPlaceMonitor)">
            <summary>
Constructor
</summary>
            <param name="placeMonitor">place monitor sensor</param>
        </member>
        <member name="T:Lumia.Sense.Testing.PlaceMonitorRecorder">
            <summary>
Place monitor recorder
</summary>
        </member>
        <member name="F:result">
Activity Monitor simulator static instance

Track point monitor simulator static instance

Step counter simulator static instance

Place monitor simulator static instance
</member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorSimulator.m_fLoop">
            <summary>Should simulator loop events</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorSimulator.m_recordingDuration">
            <summary>Recording duration</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorSimulator.m_recordingStart">
            <summary>Recording start timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorSimulator.m_simulationStart">
            <summary>Simulation start timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorSimulator.m_activities">
            <summary>Simulated activities</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorSimulator.m_fStopSimulation">
            <summary>Flag used to notify that simulation should stop</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorSimulator.m_simulationTask">
            <summary>Background simulation task</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.SimulationThreadFn">
            <summary>
Thread function for activity monitoring
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.Initialize(Lumia.Sense.Testing.SenseRecording,System.UInt64)">
            <summary>
Initialize simulator
</summary>
            <param name="recording">Sensor recording</param>
            <param name="startTime">Start time for simulation.</param>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.#ctor">
            <summary>
Constructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.DeactivateAsync">
            <summary>
Closes the connection to sensor
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.ActivateAsync">
            <summary>
Re-establishes connection to sensor, if not already available
</summary>
            <returns>
Returns an IAsyncAction object that is used to control the asynchronous operation.
</returns>
        </member>
        <member name="P:Lumia.Sense.Testing.ActivityMonitorSimulator.Type">
            <summary>
The sensor type.
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording,Windows.Foundation.DateTime)">
            <summary>
Gets the default implementation.
</summary>
            <param name="recording">Sensor recording</param>
            <param name="startTime">Starting time for recording.</param>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetDefaultAsync(Lumia.Sense.Testing.SenseRecording)">
            <summary>
Gets the default implementation.
</summary>
            <param name="recording">Sensor recording</param>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetDefaultAsync">
            <summary>
Gets the default implementation.
</summary>
            <returns>
The default implementation
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetActivityAtAsync(Windows.Foundation.DateTime)">
            <summary>
Gets the device activity at given time.
</summary>
            <param name="timestamp">time stamp</param>
            <returns>Activity at given time</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <remarks>
The available data extends only up to the last 10 days.
</remarks>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetActivityHistoryAsync(Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Returns time ordered list of activities occured during given time period.
</summary>
            <param name="periodFrom">time period start</param>
            <param name="span">time period length</param>
            <returns>Activity history</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <remarks>
The available data extends only up to the last 10 days.
<paragraph>The returned list includes all activity monitor readings within the given time pediod.
If available, the result list begins with the last entry before the beginning of the given period. 
This enables an application to determine the activity state of the device at the start of the period 
before the first actual activity event within that period.</paragraph></remarks>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetCurrentReadingAsync">
            <summary>
Gets the current activity
</summary>
            <returns>Current activity</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <remarks>
The return value may be <c>null</c> in case reading cannot be obtained.
</remarks>
        </member>
        <member name="P:Lumia.Sense.Testing.ActivityMonitorSimulator.Enabled">
            <summary>
Enables or disables activity change event monitoring.
</summary>
            <remarks>
                <see cref="E:Lumia.Sense.Testing.ActivityMonitorSimulator.ReadingChanged" /> events occur only while the property is set to <c>true</c>. However, sensor's 
current value can be queried via <see cref="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetCurrentReadingAsync" /> even when the property is <c>false</c>.
</remarks>
        </member>
        <member name="E:Lumia.Sense.Testing.ActivityMonitorSimulator.ReadingChanged">
            <summary>
Occurs each time activity changes.
</summary>
            <remarks>
An application may register a handler for this event to be notified of activity changes as 
an alternative to actively polling the values using <see cref="M:Lumia.Sense.Testing.ActivityMonitorSimulator.GetCurrentReadingAsync" />.
</remarks>
        </member>
        <member name="T:Lumia.Sense.Testing.ActivityMonitorSimulator">
            <summary>
Represents an activity state monitor sensor.
</summary>
            <remarks>
This sensor returns the user's activity state values derived from
various sources of sensor and contextual information within the device.
</remarks>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorRecorder.m_recordingEnd">
            <summary>Recording end timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorRecorder.m_recordingStart">
            <summary>Recording start timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorRecorder.m_fRecording">
            <summary>Are we currently recording?</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorRecorder.m_activityMonitor">
            <summary>Activity monitor sensor</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorRecorder.m_csRecorder">
            <summary>Synchronization object</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.ActivityMonitorRecorder.m_readingHistory">
            <summary>Container for reading history</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorRecorder.OnReadingChanged(Lumia.Sense.IActivityMonitor,Lumia.Sense.ActivityMonitorReading)">
            <summary>
Called when activity changes
</summary>
            <param name="source">source object</param>
            <param name="value">new activity</param>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorRecorder.IsRecording">
            <summary>
Returns whether the recorder is currently recording or not.
</summary>
            <returns>
                <c>true</c> if the recorder is currently recording, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorRecorder.GetRecording">
            <summary>
Returns the recording
</summary>
            <returns>
Sensor recording
</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorRecorder.StopAsync">
            <summary>
Stops the recording
</summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorRecorder.StartAsync">
            <summary>
Starts the recording
</summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorRecorder.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.ActivityMonitorRecorder.#ctor(Lumia.Sense.IActivityMonitor)">
            <summary>
Constructor
</summary>
            <param name="activityMonitor">activity monitor sensor</param>
        </member>
        <member name="T:Lumia.Sense.Testing.ActivityMonitorRecorder">
            <summary>
Activity monitor recorder
</summary>
        </member>
        <member name="M:Lumia.Internal.Json.CreateNewPlaceMap(Windows.Data.Json.JsonObject,Windows.Foundation.Collections.IMap`2{System.Int64,Windows.Foundation.Collections.IVector`1{Lumia.Sense.Place^}^},Windows.Foundation.Collections.IMap`2{System.Int64,Windows.Foundation.Collections.IVector`1{Lumia.Sense.Place^}^})">
            <summary>
Creates list of new places poll readings from given Json object
</summary>
            <param name="data">Json data</param>
            <returns>Map of new places and removed places based on time interval</returns>
        </member>
        <member name="M:Lumia.Internal.Json.CreateStepCounterCurrentReadings(Windows.Data.Json.JsonObject)">
            <summary>
Creates list of step counter current readings from given Json object
</summary>
            <param name="data">Json data</param>
            <returns>List of step counter current readings</returns>
        </member>
        <member name="M:Lumia.Internal.Json.CreateStepCounterDataPollReadings(Windows.Data.Json.JsonObject)">
            <summary>
Creates list of step counter data poll readings from given Json object
</summary>
            <param name="data">Json data</param>
            <returns>List of step counter data poll readings</returns>
        </member>
        <member name="M:Lumia.Internal.Json.CreateTrackPoints(Windows.Data.Json.JsonObject)">
            <summary>
Creates track points from given Json object
</summary>
            <param name="data">Json data</param>
            <returns>Track points</returns>
        </member>
        <member name="M:Lumia.Internal.Json.CreateActivityMonitorReadings(Windows.Data.Json.JsonObject)">
            <summary>
Creates list of activity monitor readings from given Json object
</summary>
            <param name="data">Json data</param>
            <returns>List of activity monitor readings</returns>
        </member>
        <member name="M:Lumia.Internal.Json.CreateKnownPlaces(Windows.Data.Json.JsonObject)">
            <summary>
Creates list of known places from given Json object
</summary>
            <param name="data">Json data</param>
            <returns>List of known places</returns>
        </member>
        <member name="M:Lumia.Internal.Json.CreateTrackPoint(Windows.Data.Json.JsonObject)">
            <summary>
Creates track point from given Json object
</summary>
            <param name="data">Json data</param>
            <returns>New Track point</returns>
        </member>
        <member name="M:Lumia.Internal.Json.CreateActivityMonitorReading(Windows.Data.Json.JsonObject)">
            <summary>
Creates activity monitor reading from given Json object
</summary>
            <param name="data">Json data</param>
            <returns>New activity monitor reading</returns>
        </member>
        <member name="M:Lumia.Internal.Json.CreateStepCounterReading(Windows.Data.Json.JsonObject)">
            <summary>
Creates step counter reading from given Json object
</summary>
            <param name="data">Json data</param>
            <returns>New step counter reading</returns>
        </member>
        <member name="M:Lumia.Internal.Json.CreatePlace(Windows.Data.Json.JsonObject)">
            <summary>
Creates place from given Json object
</summary>
            <param name="data">Json data</param>
            <returns>New place</returns>
        </member>
        <member name="M:Lumia.Internal.Json.CreateRecording(Windows.Data.Json.JsonObject)">
            <summary>
Creates sensor recording from given Json object
</summary>
            <param name="data">Json data</param>
            <returns>Sensor recording</returns>
        </member>
        <member name="M:Lumia.Internal.Json.ReplaceRecordingMetadata(Windows.Data.Json.JsonObject,Lumia.Sense.SensorType,Windows.Foundation.DateTime,Windows.Foundation.TimeSpan,System.String)">
            <summary>
Adds metadata to the given recording
</summary>
            <remarks>This method will replace any existing metadata</remarks>
            <param name="recording">Recording data</param>
            <param name="type">Recorded sensor type</param>
            <param name="startTime">Date of recording</param>
            <param name="duration">Recording duration</param>
            <param name="description">Description of the recording</param>
        </member>
        <member name="M:Lumia.Internal.Json.AsJson(Windows.Foundation.Collections.IVector`1{Lumia.Sense.TrackPoint^})">
            <summary>
Returns Json representation of the given track points
</summary>
            <param name="trackPoints">Track points</param>
            <returns>Json representation of the given track points</returns>
        </member>
        <member name="M:Lumia.Internal.Json.AsJson(Windows.Foundation.Collections.IVector`1{Lumia.Sense.ActivityMonitorReading^})">
            <summary>
Returns Json representation of the given activity monitor readings
</summary>
            <param name="readings">List of activity monitor readings</param>
            <param name="supportedActivities">Supported activities</param>
            <returns>Json representation of the given activity monitor readings</returns>
        </member>
        <member name="M:Lumia.Internal.Json.AsJsonV2(Windows.Foundation.Collections.IVector`1{Lumia.Sense.StepCounterReading^})">
            <summary>
Returns Json representation of the given step counter readings
</summary>
            <param name="currentReadingHistory">List of current readings</param>
            <returns>Json representation of the given step counter readings</returns>
            <remarks>Had to rename this function, as already similar function is defined</remarks>
        </member>
        <member name="M:Lumia.Internal.Json.AsJson(Windows.Foundation.Collections.IVector`1{Lumia.Sense.Place^},Windows.Foundation.Collections.IMap`2{System.Int64,Windows.Foundation.Collections.IVector`1{Lumia.Sense.Place^}^},Windows.Foundation.Collections.IMap`2{System.Int64,Windows.Foundation.Collections.IVector`1{Lumia.Sense.Place^}^})">
            <summary>
Returns Json representation of the given places data
</summary>
            <param name="knownPlaces">Known places polled at the regular interval of recording</param>
            <param name="newPlaces">Delta Known places polled at the regular interval of recording</param>
            <param name="removedPlaces">Known places polled at the regular interval of recording</param>
            <returns>Json representation of the given data</returns>
        </member>
        <member name="M:Lumia.Internal.Json.AsJson(Windows.Foundation.Collections.IVector`1{Lumia.Sense.Place^})">
            <summary>
Returns Json representation of the given places data
</summary>
            <param name="knownPlaces">Known places at the start of recording</param>
            <returns>Json representation of the given data</returns>
        </member>
        <member name="M:Lumia.Internal.Json.AsJson(Lumia.Sense.TrackPoint)">
            <summary>
Returns Json representation of the given track point
</summary>
            <param name="point">Track point</param>
            <returns>Json representation of the given track point</returns>
        </member>
        <member name="M:Lumia.Internal.Json.AsJson(Lumia.Sense.ActivityMonitorReading)">
            <summary>
Returns Json representation of the given activity monitor reading
</summary>
            <param name="reading">Activity monitor reading</param>
            <returns>Json representation of the given activity monitor reading</returns>
        </member>
        <member name="M:Lumia.Internal.Json.AsJson(Lumia.Sense.StepCounterReading)">
            <summary>
Returns Json representation of the given step counter reading
</summary>
            <param name="reading">Step counter reading</param>
            <returns>Json representation of the given step counter reading</returns>
        </member>
        <member name="M:Lumia.Internal.Json.AsJson(System.String,Windows.Data.Json.JsonArray,Windows.Data.Json.JsonArray)">
            <summary>
Returns Json representation of the given time and known places
</summary>
            <param name="time">time</param>
            <param name="JsonArray">KnownPlaces</param>
            <returns>Json representation of the given place</returns>
        </member>
        <member name="M:Lumia.Internal.Json.AsJson(Lumia.Sense.Place)">
            <summary>
Returns Json representation of the given place
</summary>
            <param name="place">Place</param>
            <returns>Json representation of the given place</returns>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterRecorder.m_recordingEnd">
            <summary>Recording end timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterRecorder.m_recordingStart">
            <summary>Recording start timestamp</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterRecorder.m_fRecording">
            <summary>Are we currently recording?</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterRecorder.m_currentReadingTimer">
            <summary>Current reading timer</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterRecorder.m_dataPollTimer">
            <summary>Data poll timer</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterRecorder.m_stepCounter">
            <summary>Step counter sensor</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterRecorder.m_csRecorder">
            <summary>Synchronization object</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.StepCounterRecorder.m_currentReadingHistory">
            <summary>Container for current readings</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterRecorder.FetchCurrentReading">
            <summary>
Fetches current reading timer reading and adds it to memory store. Note! Not thread safe!
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterRecorder.IsRecording">
            <summary>
Returns whether the recorder is currently recording or not.
</summary>
            <returns>
                <c>true</c> if the recorder is currently recording, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterRecorder.GetRecording">
            <summary>
Returns the recording
</summary>
            <returns>
Sensor recording
</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterRecorder.StopAsync">
            <summary>
Stops the recording
</summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterRecorder.StartAsync">
            <summary>
Starts the recording
</summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterRecorder.Dispose">
            <summary>
Destructor
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.StepCounterRecorder.#ctor(Lumia.Sense.IStepCounter)">
            <summary>
Constructor
</summary>
            <param name="stepCounter">step counter sensor</param>
        </member>
        <member name="T:Lumia.Sense.Testing.StepCounterRecorder">
            <summary>
Step counter recorder
</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.SenseRecorder.m_senseRecorder">
            <summary>Recorder implementation</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.SenseRecorder.GetRecording">
            <summary>
Returns the recording
</summary>
            <returns>
Sensor recording
</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example shows how to get the recorded data.
<code lang="C#">
StepCounter _sensor = await StepCounter.GetDefaultAsync();
SenseRecorder _recorder = new SenseRecorder( _sensor );
await _recorder.StartAsync();
 ...
await _recorder.StopAsync();
SenseRecording recording = _recorder.GetRecording();
</code></example>
        </member>
        <member name="M:Lumia.Sense.Testing.SenseRecorder.StopAsync">
            <summary>
Stops recording
</summary>
            <returns>Asynchronous task</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example shows how to stop recording a sensor.
<code lang="C#">
StepCounter _sensor = await StepCounter.GetDefaultAsync();
SenseRecorder _recorder = new SenseRecorder( _sensor );
await _recorder.StartAsync();
 ...
await _recorder.StopAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.Testing.SenseRecorder.StartAsync">
            <summary>
Starts recording
</summary>
            <returns>Asynchronous task</returns>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example shows how to start recording a sensor.
<code lang="C#">
StepCounter _sensor = await StepCounter.GetDefaultAsync();
SenseRecorder _recorder = new SenseRecorder( _sensor );
await _recorder.StartAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.Testing.SenseRecorder.#ctor(Lumia.Sense.ISensor)">
            <summary>
Constructor
</summary>
            <param name="sensor">sensor to be recorded</param>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example shows how to instantiate the Sense recorder.
<code lang="C#">
StepCounter _sensor = await StepCounter.GetDefaultAsync();
SenseRecorder _recorder = new SenseRecorder( _sensor );
</code></example>
        </member>
        <member name="P:Lumia.Sense.Testing.SenseRecorder.IsRecording">
            <summary>
Returns whether the recorder is currently recording or not.
</summary>
            <returns>
                <c>true</c> if the recorder is currently recording, <c>false</c> otherwise</returns>
        </member>
        <member name="T:Lumia.Sense.Testing.SenseRecorder">
            <summary>
Utility for recording sensor data
<paragraph>
You can use <see cref="T:Lumia.Sense.Testing.SenseRecorder" /> to record data from a sensor for storage or playing back at 
a later date.
</paragraph></summary>
            <example>
The following example shows how to instantiate the <c>SenseRecorder</c>, record Step counter sensor data
and prompt the user to share or save the recording into a file in Documents folder.
<code lang="C#">
StepCounter _sensor = await StepCounter.GetDefaultAsync();
SenseRecorder _recorder = new SenseRecorder( _sensor );
await _recorder.StartAsync();
 ...
await _recorder.StopAsync();
SenseRecording recording = _recorder.GetRecording();
await recording.SaveAsync();
</code></example>
        </member>
        <member name="M:Lumia.Sense.Testing.ISenseRecorder.IsRecording">
            <summary>
Returns whether the recorder is currently recording or not.
</summary>
            <returns>
                <c>true</c> if the recorder is currently recording, <c>false</c> otherwise</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.ISenseRecorder.GetRecording">
            <summary>
Returns the recording
</summary>
            <returns>
Sensor recording
</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.ISenseRecorder.StopAsync">
            <summary>
Stops recording
</summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="M:Lumia.Sense.Testing.ISenseRecorder.StartAsync">
            <summary>
Starts recording
</summary>
            <returns>Asynchronous task</returns>
        </member>
        <member name="T:Lumia.Sense.Testing.ISenseRecorder">
            <summary>
Recorder interface that each sensor implements
</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.RecordingInfo.#ctor(Lumia.Sense.SensorType,System.String,Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Constructor
</summary>
            <param name="type">Recorded sensor type</param>
            <param name="description">Description of recording</param>
            <param name="startTime">Start time of recording</param>
            <param name="duration">Recording duration</param>
        </member>
        <member name="P:Lumia.Sense.Testing.RecordingInfo.Duration">
            <summary>
Recording duration
</summary>
        </member>
        <member name="P:Lumia.Sense.Testing.RecordingInfo.StartTime">
            <summary>
Recording start time
</summary>
        </member>
        <member name="P:Lumia.Sense.Testing.RecordingInfo.Description">
            <summary>
Description of recording
</summary>
        </member>
        <member name="P:Lumia.Sense.Testing.RecordingInfo.Type">
            <summary>
Recorded sensor type
</summary>
        </member>
        <member name="T:Lumia.Sense.Testing.RecordingInfo">
            <summary>
Sensor recording metadata
</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.SenseRecording.m_duration">
            <summary>Duration</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.SenseRecording.m_startTime">
            <summary>Start time</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.SenseRecording.m_recording">
            <summary>Recorded sensor data</summary>
        </member>
        <member name="F:Lumia.Sense.Testing.SenseRecording.m_type">
            <summary>Recorded sensor type</summary>
        </member>
        <member name="M:Lumia.Sense.Testing.SenseRecording.#ctor(Lumia.Sense.SensorType,Windows.Data.Json.JsonObject,Windows.Foundation.DateTime,Windows.Foundation.TimeSpan)">
            <summary>
Constructor
</summary>
            <param name="type">Recorded sensor type</param>
            <param name="recording">Recording data</param>
            <param name="startTime">Date of recording</param>
            <param name="duration">Duration of recording</param>
        </member>
        <member name="M:Lumia.Sense.Testing.SenseRecording.LoadFromText(System.String,Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
Loads <see cref="T:Lumia.Sense.Testing.SenseRecording" /> from given text string.
</summary>
            <param name="recordingData">Recording data</param>
            <param name="encoding">Content encoding</param>
            <returns>Loaded recording</returns>
            <remarks>If you have saved the recording using the content viewer launched by <see cref="M:Lumia.Sense.Testing.SenseRecording.SaveAsync" />, the content will be 
using <c>UTF-16 LE</c> encoding.</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example loads sensor recording from given text (using UTF-8 encoding)
<code>
SenseRecording recording = await SenseRecording.LoadFromText( recordingData, UnicodeEncoding::Utf8 );
</code></example>
        </member>
        <member name="M:Lumia.Sense.Testing.SenseRecording.LoadFromText(System.String)">
            <summary>
Loads <see cref="T:Lumia.Sense.Testing.SenseRecording" /> from given text string.
</summary>
            <param name="recordingData">Recording data</param>
            <param name="encoding">Content encoding</param>
            <returns>Loaded recording</returns>
            <remarks>This method expects the content to be saved using <c>UTF-16 LE</c> encoding. If you have saved the recording using
the content viewer launched by <see cref="M:Lumia.Sense.Testing.SenseRecording.SaveAsync" />, the content will be using <c>UTF-16 LE</c> encoding.</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example loads sensor recording from given text
<code>
SenseRecording recording = await SenseRecording.LoadFromText( recordingData );
</code></example>
        </member>
        <member name="M:Lumia.Sense.Testing.SenseRecording.LoadFromFileAsync(System.String,Windows.Storage.Streams.UnicodeEncoding)">
            <summary>
Loads <see cref="T:Lumia.Sense.Testing.SenseRecording" /> from a file in application's installation directory
</summary>
            <param name="filename">Recoding file name</param>
            <param name="encoding">Content encoding</param>
            <returns>Loaded recording</returns>
            <remarks>If you have saved the recording using the content viewer launched by <see cref="M:Lumia.Sense.Testing.SenseRecording.SaveAsync" />, the content will be 
using <c>UTF-16 LE</c> encoding.</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example loads sensor recording from application's installation directory (using UTF-16 LE encoding)
<code>
SenseRecording recording = await SenseRecording.LoadFromFileAsync( "json.txt", UnicodeEncoding::Utf16LE );
</code></example>
        </member>
        <member name="M:Lumia.Sense.Testing.SenseRecording.LoadFromFileAsync(System.String)">
            <summary>
Loads <see cref="T:Lumia.Sense.Testing.SenseRecording" /> from a file in application's installation directory.
</summary>
            <param name="filename">Recoding file name</param>
            <returns>Loaded recording</returns>
            <remarks>This method expects the content to be saved using <c>UTF-16 LE</c> encoding. If you have saved the recording using
the content viewer launched by <see cref="M:Lumia.Sense.Testing.SenseRecording.SaveAsync" />, the content will be using <c>UTF-16 LE</c> encoding.</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example loads sensor recording from application's installation directory
<code>
SenseRecording recording = await SenseRecording.LoadFromFileAsync( "json.txt" );
</code></example>
        </member>
        <member name="M:Lumia.Sense.Testing.SenseRecording.SaveAsync">
            <summary>
Prompts user to save the recording in Json format in Documents folder
</summary>
            <returns>Asynchonous task</returns>
            <remarks>If you save the recording using the viewer launched by this method, the content will be saved using <c>UTF-16 LE</c> encoding.
Place make note of that when loading the recording using <c>LoadFromFileAsync</c>.</remarks>
            <exception cref="T:Platform.COMException">All errors are thrown as instances of <see cref="T:Platform.COMException" />. To get details about the error pass the
<see cref="P:Platform.Exception.HResult" /> property of the exception to <see cref="M:Lumia.Sense.SenseHelper.GetSenseError(System.Int32)" />.
This method can return the following <see cref="T:Lumia.Sense.SenseError" /> enumeration values: <see cref="F:Lumia.Sense.SenseError.GeneralFailure" /></exception>
            <example>
The following example shows how to record a sensor and prompt the user to share or save the recoding 
into a file in Documents folder.
<code lang="C#">
StepCounter _sensor = await StepCounter.GetDefaultAsync();
SenseRecorder _recorder = new SenseRecorder( _sensor );
await _recorder.StartAsync();
 ...
await _recorder.StopAsync();
SenseRecording recording = _recorder.GetRecording();
await recording.SaveAsync();

// If you want to play back the data, you can pass the recording to simulator.
SenseRecording recording = await SenseRecording.LoadFromFileAsync( "json.txt" );
StepCounterSimulator _simulator = await StepCounterSimulator.GetDefaultAsync( recording );
</code></example>
        </member>
        <member name="P:Lumia.Sense.Testing.SenseRecording.Data">
            <summary>Recording data</summary>
        </member>
        <member name="P:Lumia.Sense.Testing.SenseRecording.Version">
            <summary>Recording data file version</summary>
        </member>
        <member name="P:Lumia.Sense.Testing.SenseRecording.Description">
            <summary>Description of the recording. Initially empty, can be modified by the developer to describe the recording before saving.</summary>
        </member>
        <member name="P:Lumia.Sense.Testing.SenseRecording.Duration">
            <summary>Duration of the recording</summary>
        </member>
        <member name="P:Lumia.Sense.Testing.SenseRecording.StartTime">
            <summary>Date of the recording</summary>
        </member>
        <member name="P:Lumia.Sense.Testing.SenseRecording.Type">
            <summary>Recorded sensor type</summary>
        </member>
        <member name="T:Lumia.Sense.Testing.SenseRecording">
            <summary>
Container for <c>SenseRecorder</c> recording
</summary>
        </member>
    </members>
</doc>